Individual Files:
========================================
Folder: ./EPSA/EPSA
========== Python django File: ./EPSA/EPSA/wsgi.py
"""
WSGI config for EPSA project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "EPSA.settings")

application = get_wsgi_application()


========== Python django File: ./EPSA/EPSA/__init__.py


========== Python django File: ./EPSA/EPSA/settings.py
"""
Django settings for EPSA project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-$kw89^&*b!7ye9h&_se@74v#oj3%=uatwgsnu+e91n9$7ugpf5"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "assessment_app",
    "user_management_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "EPSA.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "EPSA.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


========== Python django File: ./EPSA/EPSA/urls.py
"""
URL configuration for EPSA project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    
    path("admin/", admin.site.urls),
    path("", include("assessment_app.urls")),
    path("", include("user_management_app.urls")),
    path('accounts/', include('django.contrib.auth.urls')),
]


========== Python django File: ./EPSA/EPSA/asgi.py
"""
ASGI config for EPSA project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "EPSA.settings")

application = get_asgi_application()


========================================
Folder: ./EPSA/assessment_app
========== Python django File: ./EPSA/assessment_app/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Assessment, UserAssessment, AssessmentQuestion, AssessmentResponse
from .forms import AssessmentForm, AssessmentResponseForm 

def index(request):
    assessments = Assessment.objects.all()  # Fetch all assessments
    # Add any other data you want to pass to the template

    context = {
        'assessments': assessments,
        # ... other context variables
    }
    return render(request, 'assessment_app/index.html', context)

@login_required
def create_assessment(request):
    if request.method == 'POST':
        form = AssessmentForm(request.POST)
        if form.is_valid():
            assessment = form.save(commit=False)
            assessment.created_by = request.user
            assessment.save()
            # Create UserAssessment for the owner
            UserAssessment.objects.create(user=request.user, assessment=assessment, role='owner')
            return redirect('assessment_detail', pk=assessment.pk)
    else:
        form = AssessmentForm()
    return render(request, 'assessment_app/create_assessment.html', {'form': form})

@login_required
def assessment_detail(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    # Check permissions
    can_edit = user_assessment.role == 'owner' or user_assessment.has_permission('edit')
    can_submit = user_assessment.role == 'owner' or user_assessment.has_permission('submit')
    can_view_responses = user_assessment.role == 'owner' or user_assessment.has_permission('view_responses')

    # Get questions and responses (if applicable)
    questions = AssessmentQuestion.objects.filter(assessment=assessment)
    responses = AssessmentResponse.objects.filter(user_assessment=user_assessment) if can_view_responses else None

    return render(request, 'assessment_app/assessment_detail.html', {
        'assessment': assessment,
        'questions': questions,
        'responses': responses,
        'can_edit': can_edit,
        'can_submit': can_submit,
        'can_view_responses': can_view_responses,
    }) 

@login_required
def edit_assessment(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    if not (user_assessment.role == 'owner' or user_assessment.has_permission('edit')):
        return redirect('assessment_detail', pk=assessment.pk)

    if request.method == 'POST':
        form = AssessmentForm(request.POST, instance=assessment)
        if form.is_valid():
            form.save()
            return redirect('assessment_detail', pk=assessment.pk)
    else:
        form = AssessmentForm(instance=assessment)
    return render(request, 'assessment_app/edit_assessment.html', {'form': form, 'assessment': assessment})

@login_required
def submit_assessment(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    if not (user_assessment.role == 'owner' or user_assessment.has_permission('submit')):
        return redirect('assessment_detail', pk=assessment.pk)

    assessment.status = 'submitted'
    assessment.save()
    return redirect('assessment_detail', pk=assessment.pk)

@login_required
def answer_questions(request, assessment_pk):
    assessment = get_object_or_404(Assessment, pk=assessment_pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)
    questions = AssessmentQuestion.objects.filter(assessment=assessment)

    if request.method == 'POST':
        forms = [AssessmentResponseForm(request.POST, question=q) for q in questions]
        if all(form.is_valid() for form in forms):
            for form in forms:
                response = form.save(commit=False)
                response.user_assessment = user_assessment
                response.save()
            return redirect('assessment_detail', pk=assessment.pk) 
    else:
        forms = [AssessmentResponseForm(question=q) for q in questions]

    return render(request, 'assessment_app/answer_questions.html', {'assessment': assessment, 'forms': forms}) 

========== Python django File: ./EPSA/assessment_app/__init__.py


========== Python django File: ./EPSA/assessment_app/apps.py
from django.apps import AppConfig


class AssessmentAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "assessment_app"


========== Python django File: ./EPSA/assessment_app/forms.py
from django import forms
from .models import Assessment, AssessmentResponse

class AssessmentForm(forms.ModelForm):
    class Meta:
        model = Assessment
        fields = ['name', 'description', 'status', 'due_date']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'due_date': forms.DateInput(attrs={'type': 'date'}), 
        }

class AssessmentResponseForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        self.question = kwargs.pop('question')
        super().__init__(*args, **kwargs)
        
        # Customize field based on question type
        if self.question.question_type == 'multiple_choice':
            choices = [(o.pk, o.option_text) for o in self.question.options.all()]
            self.fields['response_text'] = forms.ChoiceField(choices=choices, widget=forms.RadioSelect)
        elif self.question.question_type == 'checkbox':
            choices = [(o.pk, o.option_text) for o in self.question.options.all()]
            self.fields['response_text'] = forms.MultipleChoiceField(choices=choices, widget=forms.CheckboxSelectMultiple)

    class Meta:
        model = AssessmentResponse
        fields = ['response_text']
        widgets = {
            'response_text': forms.Textarea(attrs={'rows': 2})  # Default widget for text questions
        }


========== Python django File: ./EPSA/assessment_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/assessment_app/models.py
from django.db import models
from django.contrib.auth.models import User

class Assessment(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=50, choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved')])
    due_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return self.name

class UserAssessment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE)
    role = models.CharField(max_length=50, choices=[('owner', 'Owner'), ('collaborator', 'Collaborator')])

class AssessmentQuestion(models.Model):
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE)
    question_text = models.TextField()
    question_type = models.CharField(max_length=50, choices=[('multiple_choice', 'Multiple Choice'), ('text', 'Text'), ('checkbox', 'Checkbox')])
    order = models.IntegerField()
    required = models.BooleanField(default=True)

class AssessmentResponse(models.Model):
    user_assessment = models.ForeignKey(UserAssessment, on_delete=models.CASCADE)
    assessment_question = models.ForeignKey(AssessmentQuestion, on_delete=models.CASCADE)
    response_text = models.TextField(blank=True)
    # Add response_option if needed for multiple-choice questions

class UserAssessmentPermission(models.Model):
    user_assessment = models.ForeignKey(UserAssessment, on_delete=models.CASCADE)
    permission_type = models.CharField(max_length=50, choices=[('view', 'View'), ('edit', 'Edit'), ('submit', 'Submit')])

========== Python django File: ./EPSA/assessment_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),  # Add the index page URL pattern
    path('assessments/create/', views.create_assessment, name='create_assessment'),
    path('assessments/<int:pk>/', views.assessment_detail, name='assessment_detail'),
    path('assessments/<int:pk>/edit/', views.edit_assessment, name='edit_assessment'),
    path('assessments/<int:pk>/submit/', views.submit_assessment, name='submit_assessment'),
    path('assessments/<int:assessment_pk>/answer/', views.answer_questions, name='answer_questions'),
]

========== Python django File: ./EPSA/assessment_app/admin.py
from django.contrib import admin
from .models import Assessment, UserAssessment, AssessmentQuestion, AssessmentResponse, UserAssessmentPermission

admin.site.register(Assessment)
admin.site.register(UserAssessment)
admin.site.register(AssessmentQuestion)
admin.site.register(AssessmentResponse)
admin.site.register(UserAssessmentPermission)


========================================
Folder: ./EPSA/assessment_app/templates/assessment_app
========== Python django File: ./EPSA/assessment_app/templates/assessment_app/answer_questions.html
{% extends 'base.html' %}

{% block content %}
  <h2>Answer Questions for: {{ assessment.name }}</h2>
  <form method="post">
    {% csrf_token %}
    {% for form in forms %}
      <div>
        {{ form.as_p }} 
      </div>
    {% endfor %}
    <button type="submit">Submit Answers</button>
  </form>
{% endblock %}


========== Python django File: ./EPSA/assessment_app/templates/assessment_app/edit_assessment.html
{% extends 'base.html' %}

{% block content %}
  <h2>Edit Assessment: {{ assessment.name }}</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save Changes</button>
  </form>
{% endblock %}

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/assessment_detail.html
{% extends 'base.html' %}

{% block content %}
  <h2>{{ assessment.name }}</h2>
  <p>{{ assessment.description }}</p>
  <p>Status: {{ assessment.status }}</p>

  {% if can_edit %}
    <a href="{% url 'edit_assessment' assessment.pk %}">Edit Assessment</a>
  {% endif %}

  {% if can_submit %}
    <a href="{% url 'submit_assessment' assessment.pk %}">Submit Assessment</a>
  {% endif %}

  <h3>Questions:</h3>
  <ul>
    {% for question in questions %}
      <li>{{ question.question_text }}</li>
      {% if responses %}
        <p>Your Response: {{ responses.get.response_text }}</p> 
      {% endif %}
    {% endfor %}
  </ul>

  {% if not responses %}
    <a href="{% url 'answer_questions' assessment.pk %}">Answer Questions</a>
  {% endif %}

{% endblock %}

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/index.html
{% extends 'base.html' %}  <!-- Assuming you have a base template -->

{% block content %}
  <h1>Welcome to the Assessment App!</h1>

  {% if user.is_authenticated %}
    <p>Logged in as: {{ user.username }}</p>
  {% else %}
    <p><a href="{% url 'login' %}">Login</a> or <a href="{% url 'register' %}">Register</a> to get started.</p>
  {% endif %}

  <h2>Assessments:</h2>
  <ul>
    {% for assessment in assessments %}
      <li>
        <a href="{% url 'assessment_detail' assessment.pk %}">{{ assessment.name }}</a> - 
        Status: {{ assessment.status }} - 
        Due Date: {{ assessment.due_date }}
      </li>
    {% endfor %}
  </ul>

  {% if user.is_authenticated %}
    <a href="{% url 'create_assessment' %}">Create New Assessment</a>
    <a href="{% url 'user_profile' %}">My Profile</a>
  {% endif %}
{% endblock %}

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/create_assessment.html
{% extends 'base.html' %}  <!-- Assuming you have a base template -->

{% block content %}
  <h2>Create New Assessment</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}  <!-- Render the AssessmentForm fields -->
    <button type="submit">Create Assessment</button>
  </form>
{% endblock %}

========================================
Folder: ./EPSA/polling_site_app
========== Python django File: ./EPSA/polling_site_app/views.py
from django.shortcuts import render
from .models import PollingSite

def polling_site_list(request):
    polling_sites = PollingSite.objects.all()
    # ... implement search and filtering logic (if needed) ...
    return render(request, 'polling_site_app/polling_site_list.html', {'polling_sites': polling_sites})

def polling_site_detail(request, pk):
    polling_site = get_object_or_404(PollingSite, pk=pk)
    return render(request, 'polling_site_app/polling_site_detail.html', {'polling_site': polling_site})


========== Python django File: ./EPSA/polling_site_app/__init__.py


========== Python django File: ./EPSA/polling_site_app/apps.py
from django.apps import AppConfig


class PollingSiteAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "polling_site_app"


========== Python django File: ./EPSA/polling_site_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/polling_site_app/models.py
from django.db import models

class State(models.Model):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=2)  # e.g., "CA", "NY"

    def __str__(self):
        return self.name

class County(models.Model):
    name = models.CharField(max_length=255)
    state = models.ForeignKey(State, on_delete=models.CASCADE)

    def __str__(self):
        return self.name

class CityOrTown(models.Model):
    name = models.CharField(max_length=255)
    county = models.ForeignKey(County, on_delete=models.CASCADE)

    def __str__(self):
        return self.name

class PollingSite(models.Model):
    name = models.CharField(max_length=255)
    address = models.CharField(max_length=255)
    city_or_town = models.ForeignKey(CityOrTown, on_delete=models.CASCADE)
    state = models.ForeignKey(State, on_delete=models.CASCADE) 
    zip_code = models.CharField(max_length=10)
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)

    def __str__(self):
        return self.name


========== Python django File: ./EPSA/polling_site_app/admin.py
from django.contrib import admin
from .models import State, County, CityOrTown, PollingSite

admin.site.register(State)
admin.site.register(County)
admin.site.register(CityOrTown)
admin.site.register(PollingSite)


========================================
Folder: ./EPSA/user_feedback_app
========== Python django File: ./EPSA/user_feedback_app/views.py
from django.shortcuts import render

# Create your views here.


========== Python django File: ./EPSA/user_feedback_app/__init__.py


========== Python django File: ./EPSA/user_feedback_app/apps.py
from django.apps import AppConfig


class UserFeedbackAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "user_feedback_app"


========== Python django File: ./EPSA/user_feedback_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/user_feedback_app/models.py
from django.db import models
from django.contrib.auth.models import User

class UserFeedback(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    category = models.CharField(max_length=50, choices=[('usability', 'Usability'), ('functionality', 'Functionality'), ('bug_report', 'Bug Report')])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Feedback from {self.user.username}"


========== Python django File: ./EPSA/user_feedback_app/admin.py
from django.contrib import admin
from .models import UserFeedback

admin.site.register(UserFeedback)

========================================
Folder: ./EPSA/user_management_app
========== Python django File: ./EPSA/user_management_app/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from .forms import RegistrationForm, LoginForm, UserProfileForm
from .models import UserRole  # Assuming you have a UserRole model

# Registration view
def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            # Optionally assign a default role to the user
            # user.userrole_set.create(role='default_role_name')
            login(request, user)
            return redirect('home')  # Redirect to the desired page after successful registration
    else:
        form = RegistrationForm()
    return render(request, 'registration/register.html', {'form': form})

# Login view
def user_login(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('home')  # Redirect to the desired page after successful login
    else:
        form = LoginForm()
    return render(request, 'registration/login.html', {'form': form})

# User profile view
@login_required
def user_profile(request):
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect('user_profile')
    else:
        form = UserProfileForm(instance=request.user)
    return render(request, 'registration/profile.html', {'form': form})

# Logout view
def logout_view(request):
    logout(request)
    return redirect('home')  # Redirect to the desired page after logout

# Optional: User role management views
def manage_user_roles(request):
    # Implement logic to manage user roles (assign, remove, etc.)
    pass

def assign_role(request, user_id, role_id):
    # Implement logic to assign a specific role to a user
    pass

def remove_role(request, user_id, role_id):
    # Implement logic to remove a specific role from a user
    pass

========== Python django File: ./EPSA/user_management_app/__init__.py


========== Python django File: ./EPSA/user_management_app/apps.py
from django.apps import AppConfig


class UserManagementAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "user_management_app"


========== Python django File: ./EPSA/user_management_app/forms.py
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import UserRole  # Assuming you have a UserRole model

# Custom user creation form (extends the built-in UserCreationForm)
class RegistrationForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta(UserCreationForm.Meta):
        fields = UserCreationForm.Meta.fields + ('email',)

# Custom login form
class LoginForm(forms.Form):
    username = forms.CharField(max_length=150)
    password = forms.CharField(widget=forms.PasswordInput)

# User profile form
class UserProfileForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'email')

# Optional: Form for managing user roles
class UserRoleForm(forms.ModelForm):
    class Meta:
        model = UserRole
        fields = '__all__'

========== Python django File: ./EPSA/user_management_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/user_management_app/models.py
from django.db import models
from django.contrib.auth.models import User

from assessment_app.models import Assessment

class UserRole(models.Model):
    name = models.CharField(max_length=50)  # e.g., admin, analyst, collaborator

    def __str__(self):
        return self.name

class Comment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE)
    parent_comment = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)  # For nested comments
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class NotificationPreference(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    notification_type = models.CharField(max_length=50, choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification')]) 
    frequency = models.CharField(max_length=50, choices=[('immediate', 'Immediate'), ('daily', 'Daily'), ('weekly', 'Weekly')])

========== Python django File: ./EPSA/user_management_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.user_login, name='login'),
    path('logout/', views.logout_view, name='logout'),
    # ... other URL patterns for user management 
]

========== Python django File: ./EPSA/user_management_app/admin.py
from django.contrib import admin
from .models import UserRole, Comment, NotificationPreference

admin.site.register(UserRole)
admin.site.register(Comment)
admin.site.register(NotificationPreference)


========================================
Folder: ./EPSA/user_management_app/templates/registration
========== Python django File: ./EPSA/user_management_app/templates/registration/login.html
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
</body>
</html>

========== Python django File: ./EPSA/user_management_app/templates/registration/logged_out.html
<!DOCTYPE html>
<html>
<head>
    <title>Logged Out</title>
</head>
<body>
    <h1>You have been logged out.</h1>
    <a href="{% url 'login' %}">Log in again</a>
</body>
</html>

========== Python django File: ./EPSA/user_management_app/templates/registration/password_reset_complete.html


========== Python django File: ./EPSA/user_management_app/templates/registration/password_reset_confirm.html


========== Python django File: ./EPSA/user_management_app/templates/registration/password_reset_done.html


========== Python django File: ./EPSA/user_management_app/templates/registration/register.html
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h1>Register</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Register</button>
    </form>
</body>
</html>

========== Python django File: ./EPSA/user_management_app/templates/registration/profile.html
<!DOCTYPE html>
<html>
<head>
    <title>Profile</title>
</head>
<body>
    <h1>Edit Profile</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Save Changes</button>
    </form>
</body>
</html>

========== Python django File: ./EPSA/user_management_app/templates/registration/password_reset_form.html


========================================
Folder: ./EPSA/admin_compliance_app
========== Python django File: ./EPSA/admin_compliance_app/views.py
from django.shortcuts import render

# Create your views here.


========== Python django File: ./EPSA/admin_compliance_app/__init__.py


========== Python django File: ./EPSA/admin_compliance_app/apps.py
from django.apps import AppConfig


class AdminComplianceAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "admin_compliance_app"


========== Python django File: ./EPSA/admin_compliance_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/admin_compliance_app/models.py
from django.db import models
from assessment_app.models import Assessment

class ComplianceReport(models.Model):
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE)
    report_data = models.TextField()  # Consider using JSONField for structured data
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Compliance Report for Assessment {self.assessment.id}"

========== Python django File: ./EPSA/admin_compliance_app/admin.py
from django.contrib import admin
from .models import ComplianceReport

admin.site.register(ComplianceReport)


========================================
Folder: ./EPSA/adv_user_management_app
========== Python django File: ./EPSA/adv_user_management_app/views.py
from django.shortcuts import render

# Create your views here.


========== Python django File: ./EPSA/adv_user_management_app/__init__.py


========== Python django File: ./EPSA/adv_user_management_app/apps.py
from django.apps import AppConfig


class AdvUserManagementAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "adv_user_management_app"


========== Python django File: ./EPSA/adv_user_management_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/adv_user_management_app/models.py
from django.db import models
from django.contrib.auth.models import User

class UserActivityLog(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    action = models.CharField(max_length=255)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.action} at {self.timestamp}"

========== Python django File: ./EPSA/adv_user_management_app/admin.py
from django.contrib import admin
from .models import UserActivityLog

admin.site.register(UserActivityLog)


========================================
