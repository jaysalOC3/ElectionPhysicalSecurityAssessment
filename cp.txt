Individual Files:
========================================
Folder: ./EPSA/assessment_app
========== Python django File: ./EPSA/assessment_app/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse


from .models import Assessment, UserAssessment, AssessmentQuestion, AssessmentResponse
from .forms import AssessmentForm, AssessmentResponseForm 

from .risk_landscape import generate_risk_landscape_data

def index(request):
    assessments = Assessment.objects.all()  # Fetch all assessments
    # Add any other data you want to pass to the template

    context = {
        'assessments': assessments,
        # ... other context variables
    }
    return render(request, 'assessment_app/index.html', context)

@login_required
def create_assessment(request):
    if request.method == 'POST':
        form = AssessmentForm(request.POST)
        if form.is_valid():
            assessment = form.save(commit=False)
            assessment.created_by = request.user
            assessment.save()
            # Create UserAssessment for the owner
            UserAssessment.objects.create(user=request.user, assessment=assessment, role='owner')
            return redirect('assessment_detail', pk=assessment.pk)
    else:
        form = AssessmentForm()
    return render(request, 'assessment_app/create_assessment.html', {'form': form})

@login_required
def assessment_detail(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    def can_perform(action):
        return user_assessment.role == 'owner' or user_assessment.has_permission(action)

    can_edit = can_perform('edit')
    can_submit = can_perform('submit')
    can_view_responses = can_perform('view_responses')

    questions = assessment.collection.questions.all()
    responses = AssessmentResponse.objects.filter(user_assessment=user_assessment) if can_view_responses else None

    context = {
        'assessment': assessment,
        'questions': questions,
        'responses': responses,
        'can_edit': can_edit,
        'can_submit': can_submit,
        'can_view_responses': can_view_responses,
    }

    return render(request, 'assessment_app/assessment_detail.html', context)

@login_required
def edit_assessment(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    if not (user_assessment.role == 'owner' or user_assessment.has_permission('edit')):
        return redirect('assessment_detail', pk=assessment.pk)

    if request.method == 'POST':
        form = AssessmentForm(request.POST, instance=assessment)
        if form.is_valid():
            form.save()
            return redirect('assessment_detail', pk=assessment.pk)
    else:
        form = AssessmentForm(instance=assessment)
    return render(request, 'assessment_app/edit_assessment.html', {'form': form, 'assessment': assessment})

@login_required
def submit_assessment(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    if not (user_assessment.role == 'owner' or user_assessment.has_permission('submit')):
        return redirect('assessment_detail', pk=assessment.pk)

    assessment.status = 'submitted'
    assessment.save()
    return redirect('assessment_detail', pk=assessment.pk)

@login_required
def answer_questions(request, assessment_pk, question_section=None):
    assessment = get_object_or_404(Assessment, pk=assessment_pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)
    question_section_all = assessment.collection.questions.values_list('question_section', flat=True).distinct()

    if question_section:
        questions = assessment.collection.questions.filter(question_section=question_section)
    else:
        first_section = question_section_all.first()
        if first_section:
            return redirect('answer_questions_section', assessment_pk=assessment_pk, question_section=first_section)
        else:
            questions = []

    if request.method == 'POST':
        for question in questions:
            response_text = request.POST.get(f'response_{question.id}', '')
            response, created = AssessmentResponse.objects.get_or_create(
                user_assessment=user_assessment,
                assessment_question=question,
                defaults={'response_text': response_text}
            )
            response.response_text = response_text
            response.save()
        return redirect('assessment_detail', pk=assessment.pk)
    else:
        forms = []
        for question in questions:
            response = AssessmentResponse.objects.filter(
                user_assessment=user_assessment,
                assessment_question=question
            ).order_by('-id').first()  # Get the latest response for each question
            initial_data = {'response_text': response.response_text if response else ''}
            forms.append(AssessmentResponseForm(question=question, initial=initial_data))

    progress, answered_questions, total_questions = assessment.get_progress(request.user, question_section)

    return render(request, 'assessment_app/answer_questions.html', {
        'assessment': assessment,
        'forms': forms,
        'sections': question_section_all,
        'progress': progress,
        'answered_questions': answered_questions,
        'total_questions': total_questions,
    })

@login_required
def risk_landscape_data(request):
    data = generate_risk_landscape_data()
    return JsonResponse(data)

========== Python django File: ./EPSA/assessment_app/__init__.py


========== Python django File: ./EPSA/assessment_app/apps.py
from django.apps import AppConfig


class AssessmentAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "assessment_app"


========== Python django File: ./EPSA/assessment_app/forms.py
from django import forms
from .models import Assessment, AssessmentResponse

class AssessmentForm(forms.ModelForm):
    class Meta:
        model = Assessment
        fields = ['name', 'collection', 'description', 'status', 'due_date']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'due_date': forms.DateInput(attrs={'type': 'date'}), 
        }

class AssessmentResponseForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        self.question = kwargs.pop('question')
        super().__init__(*args, **kwargs)
        if self.question:
            self.fields['response_text'].label = self.question.question_text
            self.fields['response_text'].help_text  = self.question.question_help_text
    class Meta:
        model = AssessmentResponse
        fields = ['response_text']
        widgets = {
            'response_text': forms.Textarea(attrs={'rows': 2})  # Default widget for text questions
        }


========== Python django File: ./EPSA/assessment_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/assessment_app/risk_landscape.py
import random

def list_return_threats():
    nodes = [
        {"name": "Reconnaissance"},
        {"name": "Resource Development"},
        {"name": "Initial Access"},
        {"name": "Execution"},
        {"name": "Persistence"},
        {"name": "Privilege Escalation"},
        {"name": "Defense Evasion"},
        {"name": "Credential Access"},
        {"name": "Discovery"},
        {"name": "Lateral Movement"},
        {"name": "Collection"},
        {"name": "Command and Control"},
        {"name": "Exfiltration"},
        {"name": "Impact"},
    ]
    return nodes

def list_return_treatments():
    nodes = [
        {"name": "Mitigated"},
        {"name": "Partially Mitigated"},
        {"name": "Accepted"},
        {"name": "Unmitigated"},
    ]
    return nodes

def list_return_products():
    nodes = [
        {"name": "Product 1"},
        {"name": "Product 2"},
        {"name": "Product 3"},
        {"name": "Product 4"},
    ]
    return nodes

def generate_product_threats():
    return_links = []
    assigned_threats = set()

    for product in list_return_products():
        threats = list_return_threats()
        for threat_num in range(3):
            if threats:
                selected_item = random.choice(threats)
                threats.remove(selected_item)
                assigned_threats.add(selected_item["name"])
                return_links.append({"source": selected_item["name"], "target": product["name"], "value": 3})
        return_links.append({"source": product["name"], "target": "Mitigated", "value": 3})

    unassigned_threats = set(threat["name"] for threat in list_return_threats()) - assigned_threats
    for threat in unassigned_threats:
        target = random.choice(["Partially Mitigated", "Accepted", "Unmitigated"])
        return_links.append({"source": threat, "target": target, "value": 3})

    print(return_links)
    return return_links

def generate_risk_landscape_data():
    # Business logic to generate the data dynamically
    # This can involve querying the database, performing calculations, etc.
    nodes = []
    nodes += list_return_threats()
    nodes += list_return_treatments()
    nodes += list_return_products()

    links = generate_product_threats()

    data = {
        "nodes": nodes,
        "links": links
    }

    return data

========== Python django File: ./EPSA/assessment_app/models.py
from django.db import models
from django.contrib.auth.models import User
import django.db.utils

# Permission choices for UserAssessment roles
permissions = [
    ('owner', 'Owner'),           # Full access to all features and settings
    ('admin', 'Administrator'),   # Manage settings, users, and critical components without full ownership rights
    ('sitelead', 'Site Leader'),   # Access to create and modify responses
    ('analyst', 'Analyst'),       # Read-only access with the ability to run queries and generate reports
    ('collaborator', 'Collaborator'), # Access to specific projects or databases for collaboration without admin rights
    ('guest', 'Guest')            # Very limited access, possibly only to certain data views
]


def get_default_collection():
    # Try to get the first collection
    try:
        collection = AssessmentQuestionCollection.objects.first()
        if not collection:
            # No collection found, create a new default collection
            collection = AssessmentQuestionCollection.objects.create(
                name="Default Collection",
                description="Automatically created default collection"
            )
        return collection.id
    except django.db.utils.OperationalError:
        # This handles the case where this is called during a migration and the table doesn't exist yet
        return None

class AssessmentQuestionCollection(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} - {self.id}"
    
class AssessmentQuestion(models.Model):
    collection = models.ForeignKey(
        'AssessmentQuestionCollection',
        on_delete=models.CASCADE,
        related_name='questions',
        default=get_default_collection,
        null=True  # Allows the field to be null if no default collection is available at the time
    )
    question_section = models.CharField(max_length=10,default='None')
    question_text = models.TextField()
    question_help_text = models.TextField()
    question_type = models.CharField(max_length=50, choices=[
        ('multiple_choice', 'Multiple Choice'), 
        ('text', 'Text'), 
        ('checkbox', 'Checkbox')
    ])
    order = models.IntegerField()
    required = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.question_text[:50]}..."  # Return first 50 characters if long

class Assessment(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=50, choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved')])
    due_date = models.DateField(null=True, blank=True)
    collection = models.ForeignKey(
        'AssessmentQuestionCollection',
        on_delete=models.SET_NULL,
        related_name='assessments',
        null=True,  # Allows the field to be null
        default=get_default_collection,  # Set the default collection
        help_text="The collection used for this assessment."
    )

    def get_progress(self, user, question_section=None):
        total_questions = self.collection.questions.count()
        answered_questions = AssessmentResponse.objects.filter(
            user_assessment__user=user,
            user_assessment__assessment=self,
            assessment_question__question_section=question_section
        ).count()
        progress = (answered_questions / total_questions) * 100 if total_questions > 0 else 0
        return progress, answered_questions, total_questions

    def __str__(self):
        return self.name
    
class UserAssessment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE, related_name='user_assessments')
    role = models.CharField(max_length=50, choices=permissions)

    def __str__(self):
        return f"{self.user.username} - {self.assessment.name}"
    def has_permission(self, perm_name):
        return self.permissions.filter(permission_type=perm_name).exists()

class AssessmentResponse(models.Model):
    user_assessment = models.ForeignKey(UserAssessment, on_delete=models.CASCADE, related_name='responses')
    assessment_question = models.ForeignKey(AssessmentQuestion, on_delete=models.CASCADE, related_name='responses')
    response_text = models.TextField(blank=True)

    def __str__(self):
        return f"Response by {self.user_assessment.user.username} for question {self.assessment_question.question_text[:50]}"

class UserAssessmentPermission(models.Model):
    user_assessment = models.ForeignKey(UserAssessment, on_delete=models.CASCADE, related_name='permissions')
    permission_type = models.CharField(max_length=50, choices=[('view', 'View'), ('edit', 'Edit'), ('submit', 'Submit')])

    def __str__(self):
        return f"{self.permission_type} - {self.user_assessment.user.username}"


========== Python django File: ./EPSA/assessment_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),  # Add the index page URL pattern
    path('assessments/create/', views.create_assessment, name='create_assessment'),
    path('assessments/<int:pk>/', views.assessment_detail, name='assessment_detail'),
    path('assessments/<int:pk>/edit/', views.edit_assessment, name='edit_assessment'),
    path('assessments/<int:pk>/submit/', views.submit_assessment, name='submit_assessment'),
    path('assessments/<int:assessment_pk>/answer/', views.answer_questions, name='answer_questions'),
    path('assessments/<int:assessment_pk>/answer/<str:question_section>/', views.answer_questions, name='answer_questions_section'),
    path('risk-landscape-data/', views.risk_landscape_data, name='risk_landscape_data'),

]

========== Python django File: ./EPSA/assessment_app/admin.py
from django.contrib import admin
from .models import Assessment, UserAssessment, AssessmentQuestion, AssessmentResponse, UserAssessmentPermission, AssessmentQuestionCollection

admin.site.register(Assessment)
admin.site.register(UserAssessment)
@admin.register(AssessmentQuestion)
class AssessmentQuestion(admin.ModelAdmin):
    list_display = ('question_section', 'order', 'question_text')
    list_filter = ('collection',)

@admin.register(AssessmentQuestionCollection)
class AssessmentQuestionCollection(admin.ModelAdmin):
    list_display = ('name', 'is_active')

admin.site.register(AssessmentResponse)
admin.site.register(UserAssessmentPermission)


========================================
Folder: ./EPSA/assessment_app/templates/assessment_app
========== Python django File: ./EPSA/assessment_app/templates/assessment_app/answer_questions.html
{% extends 'base.html' %}
{% load progress_bar %}

{% block content %}
  <h2>Answer Questions for: {{ assessment.name }}</h2>
  <p>Progress: {% progress_bar progress %}</p>

  <form method="post">
    {% csrf_token %}
    {% for form in forms %}
      <div>
        <label for="{{ form.response_text.id_for_label }}">{{ form.question.question_text }}</label>
        <textarea name="response_{{ form.question.id }}" id="{{ form.response_text.id_for_label }}" rows="3" cols="100">{{ form.response_text.value|default:'' }}</textarea>
        {% if form.response_text.help_text %}
          <p class="help">{{ form.response_text.help_text }}</p>
        {% endif %}
      </div>
    {% endfor %}
    <button type="submit">Submit Answers</button>
  </form>
  
  <div class="pagination">
    <span class="step-links">
      {% for section in sections %}
        {% if section == question_section %}
          <strong>{{ section }}</strong>
        {% else %}
          <a href="{% url 'answer_questions_section' assessment_pk=assessment.pk question_section=section %}">{{ section }}</a>
        {% endif %}
        {% if not forloop.last %} | {% endif %}
      {% endfor %}
    </span>
  </div>
{% endblock %}

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/edit_assessment.html
{% extends 'base.html' %}

{% block content %}
  <h2>Edit Assessment: {{ assessment.name }}</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save Changes</button>
  </form>
{% endblock %}

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/assessment_detail.html
{% extends 'base.html' %}

{% block content %}
<div class="assessment-details">
  <h2>{{ assessment.name }}</h2>
  <p>{{ assessment.description }}</p>
  <p>Status: <span class="assessment-status">{{ assessment.status }}</span></p>

  <div class="assessment-actions">
    {% if can_edit %}
    <a href="{% url 'edit_assessment' assessment.pk %}" class="btn btn-primary">Edit Assessment</a>
    {% endif %}
    {% if can_submit %}
    <a href="{% url 'submit_assessment' assessment.pk %}" class="btn btn-success">Submit Assessment</a>
    {% endif %}
  </div>
</div>

<div class="risk-landscape">
  <h3>Risk Landscape:</h3>
  <div id="chart"></div>
</div>

<div class="assessment-questions">
  <h3>Questions:</h3>
  <ul>
    {% for question in questions %}
    <li>
      <h4>{{ question.question_text }}</h4>
      {% if responses %}
      <ul class="question-responses">
        {% for response in responses %}
        {% if response.assessment_question == question %}
        <li>{{ response.response_text }}</li>
        {% endif %}
        {% endfor %}
      </ul>
      {% else %}
      <p>No responses available.</p>
      {% endif %}
    </li>
    {% endfor %}
  </ul>
  <a href="{% url 'answer_questions' assessment.pk %}" class="btn btn-primary">Answer Questions</a>
</div>

{% block extra_js %}
<script src="https://d3js.org/d3.v6.min.js"></script>
<script src="https://unpkg.com/d3-sankey@0.12.3/dist/d3-sankey.min.js"></script>
<script>
  // Fetch data from the risk_landscape_data endpoint
  fetch("{% url 'risk_landscape_data' %}")
    .then(response => response.json())
    .then(data => {
      // Dimensions and configs
      const width = 928;
      const height = 600;
      const format = d3.format(",.0f");
      const nodeAlign = "justify";
      const linkColor = "source-target";

      // Create SVG container
      const svg = d3.select("#chart")
        .append("svg")
        .attr("width", "100%")
        .attr("height", "100%")
        .attr("viewBox", [0, 0, width, height])
        .attr("preserveAspectRatio", "xMinYMin meet")
        .attr("style", "font: 10px sans-serif;");

      // Configure Sankey generator
      const sankey = d3.sankey()
        .nodeId(d => d.name)
        .nodeAlign(d3[`sankey${nodeAlign[0].toUpperCase()}${nodeAlign.slice(1)}`])
        .nodeWidth(15)
        .nodePadding(10)
        .extent([[1, 5], [width - 1, height - 5]]);

      // Apply data to Sankey generator
      const { nodes, links } = sankey({
        nodes: data.nodes.map(d => Object.assign({}, d)),
        links: data.links.map(d => Object.assign({}, d))
      });

      // Define color scale
      const color = d3.scaleOrdinal(d3.schemeCategory10);

      // Create node rectangles
      const rect = svg.append("g")
        .attr("stroke", "#000")
        .selectAll("rect")
        .data(nodes)
        .join("rect")
        .attr("x", d => d.x0)
        .attr("y", d => d.y0)
        .attr("height", d => d.y1 - d.y0)
        .attr("width", d => d.x1 - d.x0)
        .attr("fill", d => color(d.name));

      // Add node titles
      rect.append("title")
        .text(d => `${d.name}\n${format(d.value)}`);

      // Create link paths
      const link = svg.append("g")
        .attr("fill", "none")
        .attr("stroke-opacity", 0.5)
        .selectAll("g")
        .data(links)
        .join("g")
        .style("mix-blend-mode", "multiply");

      // Create link gradients
      const gradient = link.append("linearGradient")
        .attr("id", (d, i) => `link-gradient-${i}`)
        .attr("gradientUnits", "userSpaceOnUse")
        .attr("x1", d => d.source.x1)
        .attr("x2", d => d.target.x0);

      gradient.append("stop")
        .attr("offset", "0%")
        .attr("stop-color", d => color(d.source.name));

      gradient.append("stop")
        .attr("offset", "100%")
        .attr("stop-color", d => color(d.target.name));

      link.append("path")
        .attr("d", d3.sankeyLinkHorizontal())
        .attr("stroke", (d, i) => `url(#link-gradient-${i})`)
        .attr("stroke-width", d => Math.max(1, d.width));

      // Add link titles
      link.append("title")
        .text(d => `${d.source.name} → ${d.target.name}\n${format(d.value)}`);

      // Add node labels
      svg.append("g")
        .selectAll("text")
        .data(nodes)
        .join("text")
        .attr("x", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
        .attr("y", d => (d.y1 + d.y0) / 2)
        .attr("dy", "0.35em")
        .attr("text-anchor", d => d.x0 < width / 2 ? "start" : "end")
        .text(d => d.name);

    })
    .catch(error => {
      console.error("Error fetching risk landscape data:", error);
    });
</script>
{% endblock %}
{% endblock %}

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/index.html
{% extends 'base.html' %}  <!-- Assuming you have a base template -->

{% block content %}
  <h1>Welcome to the Assessment App!</h1>

  {% if user.is_authenticated %}
    <p>Logged in as: {{ user.username }}</p>
  {% else %}
    <p><a href="{% url 'login' %}">Login</a> or <a href="{% url 'register' %}">Register</a> to get started.</p>
  {% endif %}

  <h2>Assessments:</h2>
  <ul>
    {% for assessment in assessments %}
      <li>
        <a href="{% url 'assessment_detail' assessment.pk %}">{{ assessment.name }}</a> - 
        Status: {{ assessment.status }} - 
        Due Date: {{ assessment.due_date }}
      </li>
    {% endfor %}
  </ul>

  {% if user.is_authenticated %}
    <a href="{% url 'create_assessment' %}">Create New Assessment</a>
    <a href="{% url 'user_profile' %}">My Profile</a>
  {% endif %}
{% endblock %}

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/progress_bar.html
<div class="progress">
    <div class="progress-bar" role="progressbar" style="width: {{ progress }}%;" aria-valuenow="{{ progress }}"
        aria-valuemin="0" aria-valuemax="100">
        {{ progress }}%
    </div>
</div>

========== Python django File: ./EPSA/assessment_app/templates/assessment_app/create_assessment.html
{% extends 'base.html' %}  <!-- Assuming you have a base template -->

{% block content %}
  <h2>Create New Assessment</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}  <!-- Render the AssessmentForm fields -->
    <button type="submit">Create Assessment</button>
  </form>
{% endblock %}

========================================
Folder: ./EPSA/threat_solutions_app
========== Python django File: ./EPSA/threat_solutions_app/views.py
from django.shortcuts import render

# Create your views here.


========== Python django File: ./EPSA/threat_solutions_app/__init__.py


========== Python django File: ./EPSA/threat_solutions_app/apps.py
from django.apps import AppConfig


class ThreatSolutionsAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "threat_solutions_app"


========== Python django File: ./EPSA/threat_solutions_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/threat_solutions_app/models.py
from django.db import models

class Threat(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name

class ThreatMitigation(models.Model):
    name = models.CharField(max_length=100)
    threat = models.ForeignKey(Threat, on_delete=models.CASCADE, related_name='ThreatMitigation', null=True, blank=True)
    vendor_description = models.TextField(blank=True)
    description = models.TextField(blank=True)

    def __str__(self):
        return self.name

class RiskTreatment(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    
    def __str__(self):
        return self.name

class Vendor(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name
    
class Safeguard(models.Model):
    name = models.CharField(max_length=100)
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE, related_name='safeguards_vendor', null=True, blank=True)
    description = models.TextField()
    threats = models.ManyToManyField(ThreatMitigation, related_name='safeguards_threats', blank=True)
    treatment = models.ForeignKey(RiskTreatment, on_delete=models.CASCADE, related_name='safeguards_treatment', null=True, blank=True)

    def __str__(self):
        return self.name

========== Python django File: ./EPSA/threat_solutions_app/urls.py
from django.urls import path
from . import views

urlpatterns = [

]

========== Python django File: ./EPSA/threat_solutions_app/admin.py
from django.contrib import admin
from .models import Threat, ThreatMitigation, Safeguard, RiskTreatment, Vendor

admin.site.register(Threat)
admin.site.register(ThreatMitigation)
admin.site.register(Safeguard)
admin.site.register(RiskTreatment)
admin.site.register(Vendor)


========================================
