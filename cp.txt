Individual Files:
========================================
Folder: ./EPSA/EPSA
========== Python django File: ./EPSA/EPSA/wsgi.py
"""
WSGI config for EPSA project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "EPSA.settings")

application = get_wsgi_application()


========== Python django File: ./EPSA/EPSA/__init__.py


========== Python django File: ./EPSA/EPSA/settings.py
"""
Django settings for EPSA project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-$kw89^&*b!7ye9h&_se@74v#oj3%=uatwgsnu+e91n9$7ugpf5"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "assessment_app",
    "user_management_app",
    "threat_solutions_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "EPSA.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "EPSA.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


========== Python django File: ./EPSA/EPSA/urls.py
"""
URL configuration for EPSA project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    
    path("admin/", admin.site.urls),
    path("", include("assessment_app.urls")),
    path("", include("user_management_app.urls")),
    path('accounts/', include('django.contrib.auth.urls')),
    path('solutions/', include('threat_solutions_app.urls')),
]


========== Python django File: ./EPSA/EPSA/asgi.py
"""
ASGI config for EPSA project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "EPSA.settings")

application = get_asgi_application()


========================================
Folder: ./EPSA/assessment_app
========== Python django File: ./EPSA/assessment_app/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse


from .models import Assessment, UserAssessment, AssessmentQuestion, AssessmentResponse
from .forms import AssessmentForm, AssessmentResponseForm 

from .risk_landscape import generate_risk_landscape_data

def index(request):
    assessments = Assessment.objects.all()  # Fetch all assessments
    # Add any other data you want to pass to the template

    context = {
        'assessments': assessments,
        # ... other context variables
    }
    return render(request, 'assessment_app/index.html', context)

@login_required
def create_assessment(request):
    if request.method == 'POST':
        form = AssessmentForm(request.POST)
        if form.is_valid():
            assessment = form.save(commit=False)
            assessment.created_by = request.user
            assessment.save()
            # Create UserAssessment for the owner
            UserAssessment.objects.create(user=request.user, assessment=assessment, role='owner')
            return redirect('assessment_detail', pk=assessment.pk)
    else:
        form = AssessmentForm()
    return render(request, 'assessment_app/create_assessment.html', {'form': form})

@login_required
def assessment_detail(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    def can_perform(action):
        return user_assessment.role == 'owner' or user_assessment.has_permission(action)

    can_edit = can_perform('edit')
    can_submit = can_perform('submit')
    can_view_responses = can_perform('view_responses')

    questions = assessment.collection.questions.all()
    responses = AssessmentResponse.objects.filter(user_assessment=user_assessment) if can_view_responses else None

    context = {
        'assessment': assessment,
        'questions': questions,
        'responses': responses,
        'can_edit': can_edit,
        'can_submit': can_submit,
        'can_view_responses': can_view_responses,
    }

    return render(request, 'assessment_app/assessment_detail.html', context)

@login_required
def edit_assessment(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    if not (user_assessment.role == 'owner' or user_assessment.has_permission('edit')):
        return redirect('assessment_detail', pk=assessment.pk)

    if request.method == 'POST':
        form = AssessmentForm(request.POST, instance=assessment)
        if form.is_valid():
            form.save()
            return redirect('assessment_detail', pk=assessment.pk)
    else:
        form = AssessmentForm(instance=assessment)
    return render(request, 'assessment_app/edit_assessment.html', {'form': form, 'assessment': assessment})

@login_required
def submit_assessment(request, pk):
    assessment = get_object_or_404(Assessment, pk=pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)

    if not (user_assessment.role == 'owner' or user_assessment.has_permission('submit')):
        return redirect('assessment_detail', pk=assessment.pk)

    assessment.status = 'submitted'
    assessment.save()
    return redirect('assessment_detail', pk=assessment.pk)

@login_required
def answer_questions(request, assessment_pk, question_section=None):
    assessment = get_object_or_404(Assessment, pk=assessment_pk)
    user_assessment = get_object_or_404(UserAssessment, user=request.user, assessment=assessment)
    question_section_all = assessment.collection.questions.values_list('question_section', flat=True).distinct()

    if question_section:
        questions = assessment.collection.questions.filter(question_section=question_section)
    else:
        first_section = question_section_all.first()
        if first_section:
            return redirect('answer_questions_section', assessment_pk=assessment_pk, question_section=first_section)
        else:
            questions = []

    if request.method == 'POST':
        for question in questions:
            response_text = request.POST.get(f'response_{question.id}', '')
            response, created = AssessmentResponse.objects.get_or_create(
                user_assessment=user_assessment,
                assessment_question=question,
                defaults={'response_text': response_text}
            )
            response.response_text = response_text
            response.save()
        return redirect('assessment_detail', pk=assessment.pk)
    else:
        forms = []
        for question in questions:
            response = AssessmentResponse.objects.filter(
                user_assessment=user_assessment,
                assessment_question=question
            ).order_by('-id').first()  # Get the latest response for each question
            initial_data = {'response_text': response.response_text if response else ''}
            forms.append(AssessmentResponseForm(question=question, initial=initial_data))

    progress, answered_questions, total_questions = assessment.get_progress(request.user, question_section)

    return render(request, 'assessment_app/answer_questions.html', {
        'assessment': assessment,
        'forms': forms,
        'sections': question_section_all,
        'progress': progress,
        'answered_questions': answered_questions,
        'total_questions': total_questions,
    })

@login_required
def risk_landscape_data(request):
    data = generate_risk_landscape_data()
    return JsonResponse(data)

========== Python django File: ./EPSA/assessment_app/__init__.py


========== Python django File: ./EPSA/assessment_app/apps.py
from django.apps import AppConfig


class AssessmentAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "assessment_app"


========== Python django File: ./EPSA/assessment_app/forms.py
from django import forms
from .models import Assessment, AssessmentResponse

class AssessmentForm(forms.ModelForm):
    class Meta:
        model = Assessment
        fields = ['name', 'collection', 'description', 'status', 'due_date']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'due_date': forms.DateInput(attrs={'type': 'date'}), 
        }

class AssessmentResponseForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        self.question = kwargs.pop('question')
        super().__init__(*args, **kwargs)
        if self.question:
            self.fields['response_text'].label = self.question.question_text
            self.fields['response_text'].help_text  = self.question.question_help_text
    class Meta:
        model = AssessmentResponse
        fields = ['response_text']
        widgets = {
            'response_text': forms.Textarea(attrs={'rows': 2})  # Default widget for text questions
        }


========== Python django File: ./EPSA/assessment_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/assessment_app/risk_landscape.py
import random

def list_return_threats():
    nodes = [
        {"name": "Reconnaissance"},
        {"name": "Resource Development"},
        {"name": "Initial Access"},
        {"name": "Execution"},
        {"name": "Persistence"},
        {"name": "Privilege Escalation"},
        {"name": "Defense Evasion"},
        {"name": "Credential Access"},
        {"name": "Discovery"},
        {"name": "Lateral Movement"},
        {"name": "Collection"},
        {"name": "Command and Control"},
        {"name": "Exfiltration"},
        {"name": "Impact"},
    ]
    return nodes

def list_return_treatments():
    nodes = [
        {"name": "Mitigated"},
        {"name": "Partially Mitigated"},
        {"name": "Accepted"},
        {"name": "Unmitigated"},
    ]
    return nodes

def list_return_products():
    nodes = [
        {"name": "Product 1"},
        {"name": "Product 2"},
        {"name": "Product 3"},
        {"name": "Product 4"},
    ]
    return nodes

def generate_product_threats():
    return_links = []
    assigned_threats = set()

    for product in list_return_products():
        threats = list_return_threats()
        for threat_num in range(3):
            if threats:
                selected_item = random.choice(threats)
                threats.remove(selected_item)
                assigned_threats.add(selected_item["name"])
                return_links.append({"source": selected_item["name"], "target": product["name"], "value": 3})
        return_links.append({"source": product["name"], "target": "Mitigated", "value": 3})

    unassigned_threats = set(threat["name"] for threat in list_return_threats()) - assigned_threats
    for threat in unassigned_threats:
        target = random.choice(["Partially Mitigated", "Accepted", "Unmitigated"])
        return_links.append({"source": threat, "target": target, "value": 3})

    print(return_links)
    return return_links

def generate_risk_landscape_data():
    # Business logic to generate the data dynamically
    # This can involve querying the database, performing calculations, etc.
    nodes = []
    nodes += list_return_threats()
    nodes += list_return_treatments()
    nodes += list_return_products()

    links = generate_product_threats()

    data = {
        "nodes": nodes,
        "links": links
    }

    return data

========== Python django File: ./EPSA/assessment_app/models.py
from django.db import models
from django.contrib.auth.models import User
import django.db.utils

# Permission choices for UserAssessment roles
permissions = [
    ('owner', 'Owner'),           # Full access to all features and settings
    ('admin', 'Administrator'),   # Manage settings, users, and critical components without full ownership rights
    ('sitelead', 'Site Leader'),   # Access to create and modify responses
    ('analyst', 'Analyst'),       # Read-only access with the ability to run queries and generate reports
    ('collaborator', 'Collaborator'), # Access to specific projects or databases for collaboration without admin rights
    ('guest', 'Guest')            # Very limited access, possibly only to certain data views
]


def get_default_collection():
    # Try to get the first collection
    try:
        collection = AssessmentQuestionCollection.objects.first()
        if not collection:
            # No collection found, create a new default collection
            collection = AssessmentQuestionCollection.objects.create(
                name="Default Collection",
                description="Automatically created default collection"
            )
        return collection.id
    except django.db.utils.OperationalError:
        # This handles the case where this is called during a migration and the table doesn't exist yet
        return None

class AssessmentQuestionCollection(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} - {self.id}"
    
class AssessmentQuestion(models.Model):
    collection = models.ForeignKey(
        'AssessmentQuestionCollection',
        on_delete=models.CASCADE,
        related_name='questions',
        default=get_default_collection,
        null=True  # Allows the field to be null if no default collection is available at the time
    )
    question_section = models.CharField(max_length=10,default='None')
    question_text = models.TextField()
    question_help_text = models.TextField()
    question_type = models.CharField(max_length=50, choices=[
        ('multiple_choice', 'Multiple Choice'), 
        ('text', 'Text'), 
        ('checkbox', 'Checkbox')
    ])
    order = models.IntegerField()
    required = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.question_text[:50]}..."  # Return first 50 characters if long

class Assessment(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=50, choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved')])
    due_date = models.DateField(null=True, blank=True)
    collection = models.ForeignKey(
        'AssessmentQuestionCollection',
        on_delete=models.SET_NULL,
        related_name='assessments',
        null=True,  # Allows the field to be null
        default=get_default_collection,  # Set the default collection
        help_text="The collection used for this assessment."
    )

    def get_progress(self, user, question_section=None):
        total_questions = self.collection.questions.count()
        answered_questions = AssessmentResponse.objects.filter(
            user_assessment__user=user,
            user_assessment__assessment=self,
            assessment_question__question_section=question_section
        ).count()
        progress = (answered_questions / total_questions) * 100 if total_questions > 0 else 0
        return progress, answered_questions, total_questions

    def __str__(self):
        return self.name
    
class UserAssessment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE, related_name='user_assessments')
    role = models.CharField(max_length=50, choices=permissions)

    def __str__(self):
        return f"{self.user.username} - {self.assessment.name}"
    def has_permission(self, perm_name):
        return self.permissions.filter(permission_type=perm_name).exists()

class AssessmentResponse(models.Model):
    user_assessment = models.ForeignKey(UserAssessment, on_delete=models.CASCADE, related_name='responses')
    assessment_question = models.ForeignKey(AssessmentQuestion, on_delete=models.CASCADE, related_name='responses')
    response_text = models.TextField(blank=True)

    def __str__(self):
        return f"Response by {self.user_assessment.user.username} for question {self.assessment_question.question_text[:50]}"

class UserAssessmentPermission(models.Model):
    user_assessment = models.ForeignKey(UserAssessment, on_delete=models.CASCADE, related_name='permissions')
    permission_type = models.CharField(max_length=50, choices=[('view', 'View'), ('edit', 'Edit'), ('submit', 'Submit')])

    def __str__(self):
        return f"{self.permission_type} - {self.user_assessment.user.username}"


========== Python django File: ./EPSA/assessment_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),  # Add the index page URL pattern
    path('assessments/create/', views.create_assessment, name='create_assessment'),
    path('assessments/<int:pk>/', views.assessment_detail, name='assessment_detail'),
    path('assessments/<int:pk>/edit/', views.edit_assessment, name='edit_assessment'),
    path('assessments/<int:pk>/submit/', views.submit_assessment, name='submit_assessment'),
    path('assessments/<int:assessment_pk>/answer/', views.answer_questions, name='answer_questions'),
    path('assessments/<int:assessment_pk>/answer/<str:question_section>/', views.answer_questions, name='answer_questions_section'),
    path('risk-landscape-data/', views.risk_landscape_data, name='risk_landscape_data'),

]

========== Python django File: ./EPSA/assessment_app/admin.py
from django.contrib import admin
from .models import Assessment, UserAssessment, AssessmentQuestion, AssessmentResponse, UserAssessmentPermission, AssessmentQuestionCollection

admin.site.register(Assessment)
admin.site.register(UserAssessment)
@admin.register(AssessmentQuestion)
class AssessmentQuestion(admin.ModelAdmin):
    list_display = ('question_section', 'order', 'question_text')
    list_filter = ('collection',)

@admin.register(AssessmentQuestionCollection)
class AssessmentQuestionCollection(admin.ModelAdmin):
    list_display = ('name', 'is_active')

admin.site.register(AssessmentResponse)
admin.site.register(UserAssessmentPermission)


========================================
Folder: ./EPSA/user_management_app
========== Python django File: ./EPSA/user_management_app/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from .forms import RegistrationForm, LoginForm, UserProfileForm
from .models import UserRole  # Assuming you have a UserRole model

# Registration view
def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            # Optionally assign a default role to the user
            # user.userrole_set.create(role='default_role_name')
            login(request, user)
            return redirect('index')  # Redirect to the desired page after successful registration
    else:
        form = RegistrationForm()
    return render(request, 'registration/register.html', {'form': form})

# Login view
def user_login(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('index')  # Redirect to the desired page after successful login
    else:
        form = LoginForm()
    return render(request, 'registration/login.html', {'form': form})

# User profile view
@login_required
def user_profile(request):
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect('user_profile')
    else:
        form = UserProfileForm(instance=request.user)
    return render(request, 'registration/profile.html', {'form': form})

# Logout view
def logout_view(request):
    logout(request)
    return redirect('index')  # Redirect to the desired page after logout

# Optional: User role management views
def manage_user_roles(request):
    # Implement logic to manage user roles (assign, remove, etc.)
    pass

def assign_role(request, user_id, role_id):
    # Implement logic to assign a specific role to a user
    pass

def remove_role(request, user_id, role_id):
    # Implement logic to remove a specific role from a user
    pass

========== Python django File: ./EPSA/user_management_app/__init__.py


========== Python django File: ./EPSA/user_management_app/apps.py
from django.apps import AppConfig


class UserManagementAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "user_management_app"


========== Python django File: ./EPSA/user_management_app/forms.py
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import UserRole  # Assuming you have a UserRole model

class RegistrationForm(UserCreationForm):
    email = forms.EmailField(required=True)
    first_name = forms.CharField(max_length=150, required=True)
    last_name = forms.CharField(max_length=150, required=True)
    password2 = forms.CharField(label='Confirm Password', widget=forms.PasswordInput, required=True)

    class Meta(UserCreationForm.Meta):
        model = User
        fields = UserCreationForm.Meta.fields + ('email', 'first_name', 'last_name')


# Custom login form
class LoginForm(forms.Form):
    username = forms.CharField(max_length=150)
    password = forms.CharField(widget=forms.PasswordInput)

# User profile form
class UserProfileForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'email')

# Optional: Form for managing user roles
class UserRoleForm(forms.ModelForm):
    class Meta:
        model = UserRole
        fields = '__all__'

========== Python django File: ./EPSA/user_management_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/user_management_app/models.py
from django.db import models
from django.contrib.auth.models import User

from assessment_app.models import Assessment

class UserRole(models.Model):
    name = models.CharField(max_length=50)  # e.g., admin, analyst, collaborator

    def __str__(self):
        return self.name

class Comment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE)
    parent_comment = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)  # For nested comments
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class NotificationPreference(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    notification_type = models.CharField(max_length=50, choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification')]) 
    frequency = models.CharField(max_length=50, choices=[('immediate', 'Immediate'), ('daily', 'Daily'), ('weekly', 'Weekly')])

========== Python django File: ./EPSA/user_management_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.user_login, name='login'),
    path('logout/', views.logout_view, name='logout'),
    path('MyProfile/', views.user_profile, name='user_profile' )
    # ... other URL patterns for user management 
]

========== Python django File: ./EPSA/user_management_app/admin.py
from django.contrib import admin
from .models import UserRole, Comment, NotificationPreference

admin.site.register(UserRole)
admin.site.register(Comment)
admin.site.register(NotificationPreference)


========================================
Folder: ./EPSA/threat_solutions_app
========== Python django File: ./EPSA/threat_solutions_app/views.py
from django.shortcuts import render

# Create your views here.


========== Python django File: ./EPSA/threat_solutions_app/__init__.py


========== Python django File: ./EPSA/threat_solutions_app/apps.py
from django.apps import AppConfig


class ThreatSolutionsAppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "threat_solutions_app"


========== Python django File: ./EPSA/threat_solutions_app/tests.py
from django.test import TestCase

# Create your tests here.


========== Python django File: ./EPSA/threat_solutions_app/models.py
from django.db import models

# Create your models here.


========== Python django File: ./EPSA/threat_solutions_app/urls.py
from django.urls import path
from . import views

urlpatterns = [

]

========== Python django File: ./EPSA/threat_solutions_app/admin.py
from django.contrib import admin

# Register your models here.


========================================
